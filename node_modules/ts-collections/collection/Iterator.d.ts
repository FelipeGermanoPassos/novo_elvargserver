export interface List<TItem> {
    getSize(): number;
    getItem(index: number): TItem;
}
export declare abstract class AbstractIterator<TItem, TValueItem> implements Iterator<TValueItem> {
    protected rawList: List<TItem>;
    private index;
    constructor(rawList: List<TItem>);
    /**
     * @override
     */
    next(): IteratorResult<TValueItem>;
    protected abstract getItem(currentValue: TItem): TValueItem;
}
export declare class DefaultIterator<TItem> extends AbstractIterator<TItem, TItem> {
    protected list: List<TItem>;
    constructor(list: List<TItem>);
    /**
     * @override
     */
    protected getItem<TResult>(currentValue: TItem): TItem;
}
export declare class ArrayIterator<TItem> extends DefaultIterator<TItem> {
    protected array: Array<TItem>;
    constructor(array: Array<TItem>);
}
