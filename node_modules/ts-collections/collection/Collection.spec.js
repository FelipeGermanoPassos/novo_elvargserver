"use strict";
var _ = require('lodash');
var Collections_1 = require('./Collections');
var Collection_1 = require('./Collection');
describe('Collection', function () {
    describe('Checking the filter method of collection', function () {
        it('Collection must successfully filter the input elements', function () {
            var list = Collections_1.Collections.emptyList()
                .add(100)
                .add(200)
                .add(300)
                .add(400)
                .filter(function (item) { return item > 200; });
            expect(list.get(0)).toEqual(300);
            expect(list.get(1)).toEqual(400);
            expect(list.getSize()).toEqual(2);
            // lodash
            expect(list[0]).toEqual(300);
            expect(list[1]).toEqual(400);
        });
    });
    describe('Checking the find method of collection', function () {
        it('Collection must successfully find the input element', function () {
            var User = (function () {
                function User(id) {
                    this.id = id;
                }
                User.prototype.getId = function () {
                    return this.id;
                };
                return User;
            }());
            var thirdUser;
            var list = Collections_1.Collections.emptyList()
                .add(new User(100))
                .add(new User(200))
                .add(thirdUser = new User(300))
                .add(new User(400));
            expect(list.find(function (user) { return user.getId() === 300; })).toEqual(thirdUser);
            expect(list.find({
                check: function (user) { return user.getId() === 300; }
            })).toEqual(thirdUser);
        });
    });
    describe('Checking the decorated collection', function () {
        it('Decorated collection must successfully decorate and filter the input elements', function () {
            var list = Collections_1.Collections.emptyList()
                .add("hello")
                .add("hello world");
            var array = [list.get(0).length, list.get(1).length];
            var filteredListSize = 0;
            var filteredDecoratedCollection = Collections_1.Collections.makeDecoratedList(list, {
                decorate: function (item) {
                    return item.length;
                }
            }).filter({
                check: function (wordLength) {
                    return wordLength > 5;
                }
            });
            filteredDecoratedCollection.iterate(function (decoratedItem) {
                expect(decoratedItem).toEqual(array[1]);
                filteredListSize++;
            });
            expect(filteredListSize).toEqual(1);
            expect(filteredDecoratedCollection.getSize()).toEqual(1);
            expect(filteredDecoratedCollection[0]).toEqual(11);
            expect(filteredDecoratedCollection[1]).toEqual(undefined);
        });
    });
    describe('Checking group up index of the collection', function () {
        it('The index should grow correctly', function () {
            var list = Collections_1.Collections.emptyList();
            for (var i = 0; i < Collection_1.INITIAL_CAPACITY; i++) {
                list.add("Element" + i);
            }
            expect(list[0]).toEqual("Element0");
            expect(list[Collection_1.INITIAL_CAPACITY - 1]).toEqual("Element" + (Collection_1.INITIAL_CAPACITY - 1));
            expect(list[Collection_1.INITIAL_CAPACITY]).toEqual(undefined);
            var listSize = list.getSize(), addedSize = 10;
            for (var i = listSize; i < listSize + addedSize; i++) {
                list.add("Element" + i);
            }
            expect(list[Collection_1.INITIAL_CAPACITY]).toEqual("Element" + (Collection_1.INITIAL_CAPACITY));
            expect(list[Collection_1.INITIAL_CAPACITY + Math.round(addedSize / 2)]).toEqual("Element" + (Collection_1.INITIAL_CAPACITY + Math.round(addedSize / 2)));
            expect(list[Collection_1.INITIAL_CAPACITY + addedSize - 1]).toEqual("Element" + (Collection_1.INITIAL_CAPACITY + addedSize - 1));
            expect(list[Collection_1.INITIAL_CAPACITY + addedSize]).toEqual(undefined);
        });
        it('A very large increase in the index should process successfully', function () {
            var list = Collections_1.Collections.emptyList();
            var maxSize = Collection_1.INITIAL_CAPACITY + 1000000;
            for (var i = 0; i < maxSize; i++) {
                list.add("Element" + i);
                expect(list[i]).toEqual("Element" + i);
            }
            expect(list[maxSize]).toEqual(undefined);
        });
    });
    describe('Checking lodash support', function () {
        it('The lodash should work correctly', function () {
            var list = Collections_1.Collections.emptyList().add(100).add(50).add(200);
            expect(_(list).min()).toEqual(501);
        });
    });
});
//# sourceMappingURL=Collection.spec.js.map