import { ICollection } from './ICollection';
import { Collection } from './Collection';
import { IItemDecorator } from './IItemDecorator';
import { IComparator } from '../comparator/IComparator';
export declare class DecoratedCollection<TItem, TDecoratedItem> extends Collection<TItem | TDecoratedItem> {
    protected collection: ICollection<TItem>;
    protected itemDecorator: IItemDecorator<TItem, TDecoratedItem>;
    constructor(collection: ICollection<TItem>, itemDecorator: IItemDecorator<TItem, TDecoratedItem>);
    /**
     * Decorated iterator for original collection
     *
     * @override
     */
    getIteratorInstance(): Iterator<TItem | TDecoratedItem>;
    /**
     * Get decorated item
     *
     * @override
     */
    get(index: number): TDecoratedItem;
    /**
     * Make clone of the original collection
     *
     * @override
     */
    protected newInstance(): ICollection<TItem>;
    /**
     * Sort original collection
     *
     * @override
     */
    sort(comparator: IComparator<TItem>): ICollection<TItem>;
    /**
     * Get size of original collection
     *
     * @override
     */
    getSize(): number;
    /**
     * Add an element to original collection
     *
     * @override
     */
    add(item: TItem): ICollection<TItem>;
    /**
     * Insert element into original collection
     *
     * @override
     */
    insert(position: number, item: TItem): ICollection<TItem>;
    /**
     * Remove the all elements from original collection
     *
     * @override
     */
    removeAll(): ICollection<TItem>;
    /**
     * Remove an element from original collection
     *
     * @override
     */
    remove(item: TItem): boolean;
}
