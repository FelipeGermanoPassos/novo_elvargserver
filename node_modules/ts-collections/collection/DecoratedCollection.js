"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Collection_1 = require('./Collection');
var DecoratedCollection = (function (_super) {
    __extends(DecoratedCollection, _super);
    function DecoratedCollection(collection, itemDecorator) {
        _super.call(this);
        this.collection = collection;
        this.itemDecorator = itemDecorator;
    }
    /**
     * Decorated iterator for original collection
     *
     * @override
     */
    DecoratedCollection.prototype.getIteratorInstance = function () {
        var _this = this;
        var iterator = this.collection.getIteratorInstance();
        return {
            next: function () {
                var iteratorResult = iterator.next();
                return {
                    done: iteratorResult.done,
                    value: !iteratorResult.done ? _this.itemDecorator.decorate(iteratorResult.value) : null
                };
            }
        };
    };
    /**
     * Get decorated item
     *
     * @override
     */
    DecoratedCollection.prototype.get = function (index) {
        return this.itemDecorator.decorate(this.collection.get(index));
    };
    /**
     * Make clone of the original collection
     *
     * @override
     */
    DecoratedCollection.prototype.newInstance = function () {
        return Reflect.construct(this.collection.constructor, []);
    };
    /**
     * Sort original collection
     *
     * @override
     */
    DecoratedCollection.prototype.sort = function (comparator) {
        return this.collection.sort(comparator);
    };
    /**
     * Get size of original collection
     *
     * @override
     */
    DecoratedCollection.prototype.getSize = function () {
        return this.collection.getSize();
    };
    /**
     * Add an element to original collection
     *
     * @override
     */
    DecoratedCollection.prototype.add = function (item) {
        return this.collection.add(item);
    };
    /**
     * Insert element into original collection
     *
     * @override
     */
    DecoratedCollection.prototype.insert = function (position, item) {
        return this.collection.insert(position, item);
    };
    /**
     * Remove the all elements from original collection
     *
     * @override
     */
    DecoratedCollection.prototype.removeAll = function () {
        return this.collection.removeAll();
    };
    /**
     * Remove an element from original collection
     *
     * @override
     */
    DecoratedCollection.prototype.remove = function (item) {
        return this.collection.remove(item);
    };
    return DecoratedCollection;
}(Collection_1.Collection));
exports.DecoratedCollection = DecoratedCollection;
//# sourceMappingURL=DecoratedCollection.js.map