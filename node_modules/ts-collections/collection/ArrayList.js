"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var Collection_1 = require('./Collection');
var Iterator_1 = require('./Iterator');
var ArrayList = (function (_super) {
    __extends(ArrayList, _super);
    function ArrayList(data) {
        if (data === void 0) { data = []; }
        _super.call(this);
        this.data = data;
    }
    /**
     * @override
     */
    ArrayList.prototype.get = function (index) {
        return this.data[index];
    };
    /**
     * @override
     */
    ArrayList.prototype.addAll = function (items) {
        this.addArray(items.toArray());
        return this;
    };
    /**
     * @override
     */
    ArrayList.prototype.add = function (item) {
        this.insert(this.length, item);
        return this;
    };
    /**
     * @override
     */
    ArrayList.prototype.addArray = function (items) {
        this.data = this.data.concat(items);
        this.checkAndGrowUp();
        return this;
    };
    /**
     * @override
     */
    ArrayList.prototype.insert = function (position, item) {
        this.data.splice(position, 0, item);
        return _super.prototype.insert.call(this, position, item);
    };
    /**
     * @override
     */
    ArrayList.prototype.sort = function (comparator) {
        this.data.sort(function (o1, o2) { return comparator.compare(o1, o2); });
        return this;
    };
    /**
     * @override
     */
    ArrayList.prototype.removeAll = function () {
        this.data.length = 0;
        return this;
    };
    /**
     * @override
     */
    ArrayList.prototype.remove = function (item) {
        var previousLength = this.length;
        this.data = this.data.filter(function (cur) { return item !== cur; });
        return previousLength !== this.length;
    };
    /**
     * @override
     */
    ArrayList.prototype.getIteratorInstance = function () {
        return new Iterator_1.ArrayIterator(this.data);
    };
    /**
     * @override
     */
    ArrayList.prototype.toArray = function () {
        return this.data;
    };
    /**
     * @override
     */
    ArrayList.prototype.getSize = function () {
        return this.data.length;
    };
    return ArrayList;
}(Collection_1.Collection));
exports.ArrayList = ArrayList;
//# sourceMappingURL=ArrayList.js.map