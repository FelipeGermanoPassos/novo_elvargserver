"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var DefaultMapper_1 = require('../mapper/DefaultMapper');
var Utils_1 = require('../Utils');
var $$TS_COLLECTIONS_INITIAL_CAPACITY = '$$TS_COLLECTIONS_INITIAL_CAPACITY';
var $$TS_COLLECTIONS_CAPACITY_GROW_FACTOR = '$$TS_COLLECTIONS_CAPACITY_GROW_FACTOR';
exports.INITIAL_CAPACITY = Utils_1.Utils.isDefined(window) && window[$$TS_COLLECTIONS_INITIAL_CAPACITY]
    ? parseInt(window[$$TS_COLLECTIONS_INITIAL_CAPACITY])
    : 10000;
exports.CAPACITY_GROW_FACTOR = Utils_1.Utils.isDefined(window) && window[$$TS_COLLECTIONS_CAPACITY_GROW_FACTOR]
    ? parseInt(window[$$TS_COLLECTIONS_CAPACITY_GROW_FACTOR])
    : 0.05;
/**
 * Lodash support.
 */
function defineIndexProperties(object, start, end) {
    var properties = {};
    for (var i = start; i < end; i++) {
        (function (index) { return properties[index.toString()] = {
            get: function () {
                return this.get(index);
            }
        }; })(i);
    }
    Object.defineProperties(object, properties);
}
var AbstractCollection = (function () {
    function AbstractCollection() {
        this.currentCapacity = exports.INITIAL_CAPACITY;
        /**
         * ES6 iterators compatibility
         * @override
         */
        this[Symbol.iterator] = this.iterator();
    }
    /**
     * @override
     */
    AbstractCollection.prototype.iterator = function () {
        var _this = this;
        return function () {
            return _this.getIteratorInstance();
        };
    };
    /**
     * @override
     */
    AbstractCollection.prototype.insert = function (position, item) {
        this.checkAndGrowUp();
        return this;
    };
    /**
     * @override
     */
    AbstractCollection.prototype.addArray = function (items) {
        this.checkAndGrowUp();
        return this;
    };
    AbstractCollection.prototype.checkAndGrowUp = function () {
        if (this.length > this.currentCapacity) {
            var previousCapacity = this.currentCapacity;
            defineIndexProperties(this, previousCapacity, this.currentCapacity = previousCapacity + Math.round(this.length * exports.CAPACITY_GROW_FACTOR));
        }
    };
    return AbstractCollection;
}());
exports.AbstractCollection = AbstractCollection;
var Collection = (function (_super) {
    __extends(Collection, _super);
    function Collection() {
        _super.call(this);
    }
    /**
     * @override
     */
    Collection.prototype.iterate = function (callback, predicate) {
        for (var iterator = this.iterator()(), iteratorResult = iterator.next(), index = 0; !iteratorResult.done; iteratorResult = iterator.next()) {
            var value = iteratorResult.value;
            if (!predicate || this.isSuitable(value, predicate)) {
                if (callback.call(this, value, index++) === false) {
                    return;
                }
            }
        }
    };
    /**
     * Compatible with an array
     */
    Collection.prototype.forEach = function (callback) {
        this.iterate(callback);
    };
    /**
     * @override
     */
    Collection.prototype.addAll = function (items) {
        var _this = this;
        items.iterate(function (item) { return _this.add(item); });
        return this;
    };
    /**
     * Compatible with an array
     * @override
     */
    Collection.prototype.filter = function (predicate) {
        var filteredCollection = this.newInstance();
        this.iterate(function (o) { return filteredCollection.add(o); }, predicate);
        return filteredCollection;
    };
    /**
     * @override
     */
    Collection.prototype.map = function (mapper) {
        var ids = [];
        this.iterate(function (item) { return ids.push(mapper.map(item)); });
        return ids;
    };
    /**
     * @override
     */
    Collection.prototype.toArray = function () {
        return this.map(new DefaultMapper_1.DefaultMapper());
    };
    /**
     * @override
     */
    Collection.prototype.addArray = function (items) {
        var _this = this;
        items.forEach(function (item) { return _this.add(item); });
        return this;
    };
    /**
     * Compatible with an array
     * @override
     */
    Collection.prototype.find = function (predicate) {
        var _this = this;
        var result = null;
        this.iterate(function (item) {
            if (_this.isSuitable(item, predicate)) {
                result = item;
                return false;
            }
            return true;
        });
        return result;
    };
    /**
     * @override
     */
    Collection.prototype.isEmpty = function () {
        return !this.getSize();
    };
    Object.defineProperty(Collection.prototype, "length", {
        /**
         * @override
         */
        get: function () {
            return this.getSize();
        },
        enumerable: true,
        configurable: true
    });
    Collection.prototype.newInstance = function () {
        return Reflect.construct(this.constructor, []);
    };
    Collection.prototype.isSuitable = function (value, predicate) {
        return Utils_1.Utils.isFunction(predicate)
            ? predicate(value)
            : predicate.check(value);
    };
    return Collection;
}(AbstractCollection));
exports.Collection = Collection;
(function () { return defineIndexProperties(Collection.prototype, 0, exports.INITIAL_CAPACITY); })();
//# sourceMappingURL=Collection.js.map